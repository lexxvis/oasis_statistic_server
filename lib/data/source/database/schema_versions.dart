import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class _S2 extends i0.VersionedSchema {
  _S2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    usersInformation,
    errorLogs,
    gameStatistics,
  ];
  late final Shape0 usersInformation = Shape0(
      source: i0.VersionedTable(
        entityName: 'users_information',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 errorLogs = Shape1(
      source: i0.VersionedTable(
        entityName: 'error_logs',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_14,
          _column_15,
          _column_16,
          _column_17,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 gameStatistics = Shape2(
      source: i0.VersionedTable(
        entityName: 'game_statistics',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_14,
          _column_15,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_17,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get playerId =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get countryCode =>
      columnsByName['country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get adMobInterstitials =>
      columnsByName['adMobInt']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get adMobRewarded =>
      columnsByName['adMobRew']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get adUnityInterstitials =>
      columnsByName['adUnityInt']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get adUnityRewarded =>
      columnsByName['adUnityRew']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get moneyIn =>
      columnsByName['money_in']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get moneyOut =>
      columnsByName['money_out']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get balance =>
      columnsByName['balance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get goldBalance =>
      columnsByName['gold_balance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get level =>
      columnsByName['level']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdTime =>
      columnsByName['created_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastActivity =>
      columnsByName['last_activity']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get sessions =>
      columnsByName['sessions']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 15, maxTextLength: 15),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('country', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('adMobInt', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>('adMobRew', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>('adUnityInt', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>('adUnityRew', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>('money_in', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('money_out', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('balance', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('gold_balance', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('level', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(0));
i1.GeneratedColumn<DateTime> _column_11(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_12(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_activity', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('sessions', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(1));

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get time =>
      columnsByName['time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get playerId =>
      columnsByName['player_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<DateTime> _column_15(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('description', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('player_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES users_information (id)'));

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get time =>
      columnsByName['time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get ante =>
      columnsByName['ante']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get bet =>
      columnsByName['bet']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get win =>
      columnsByName['win']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get gameResult =>
      columnsByName['game_result']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get dealerHand =>
      columnsByName['dealer_hand']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get playerHand =>
      columnsByName['player_hand']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get playerUnchangedHand =>
      columnsByName['player_unchanged_hand']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get playerId =>
      columnsByName['player_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>('ante', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_19(String aliasedName) =>
    i1.GeneratedColumn<int>('bet', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>('win', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('game_result', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>('dealer_hand', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('player_hand', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('player_unchanged_hand', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, _S2 schema) from1To2,
}) {
  return i1.Migrator.stepByStepHelper(step: (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = _S2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  });
}
